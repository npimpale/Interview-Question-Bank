-- CREATING A TEMP TABLE 
CREATE TABLE #EMPLOYEES
(
	ID INT NOT NULL,
	NAME VARCHAR(30) NOT NULL,
	DEPT VARCHAR(30) NOT NULL,
	SALARY INT NOT NULL
)
GO


-- ADDING DATA INTO TEMP TABLE
INSERT INTO #EMPLOYEES VALUES (1,'A', 'IT', '1000')
INSERT INTO #EMPLOYEES VALUES (2,'B', 'HR', '25000')
INSERT INTO #EMPLOYEES VALUES (3,'C', 'FIN', '1000')
INSERT INTO #EMPLOYEES VALUES (4,'D', 'IT', '35000')
INSERT INTO #EMPLOYEES VALUES (5,'F', 'FIN', '25000')
INSERT INTO #EMPLOYEES VALUES (6,'G', 'HR', '10000')
INSERT INTO #EMPLOYEES VALUES (7,'H', 'IT', '25000')
INSERT INTO #EMPLOYEES VALUES (8,'I', 'IT', '20000')
INSERT INTO #EMPLOYEES VALUES (9,'J', 'IT', '15000')
INSERT INTO #EMPLOYEES VALUES (10,'K', 'FIN', '25000')
INSERT INTO #EMPLOYEES VALUES (11,'L', 'HR', '35000')
INSERT INTO #EMPLOYEES VALUES (12,'M', 'FIN', '18000')
INSERT INTO #EMPLOYEES VALUES (13,'N', 'FIN', '10000')
INSERT INTO #EMPLOYEES VALUES (14,'O', 'HR', '15000')
INSERT INTO #EMPLOYEES VALUES (15,'P', 'IT', '35000')
GO

-- Duplicate records
INSERT INTO #EMPLOYEES VALUES (16,'A', 'IT', '1000')
INSERT INTO #EMPLOYEES VALUES (17,'B', 'HR', '25000')
INSERT INTO #EMPLOYEES VALUES (18,'C', 'FIN', '1000')
INSERT INTO #EMPLOYEES VALUES (19,'D', 'IT', '35000')
INSERT INTO #EMPLOYEES VALUES (20,'F', 'FIN', '25000')
INSERT INTO #EMPLOYEES VALUES (21,'G', 'HR', '10000')
INSERT INTO #EMPLOYEES VALUES (22,'H', 'IT', '25000')
INSERT INTO #EMPLOYEES VALUES (23,'I', 'IT', '20000')
INSERT INTO #EMPLOYEES VALUES (24,'J', 'IT', '15000')
INSERT INTO #EMPLOYEES VALUES (25,'K', 'FIN', '25000')
INSERT INTO #EMPLOYEES VALUES (26,'L', 'HR', '35000')
INSERT INTO #EMPLOYEES VALUES (27,'M', 'FIN', '18000')
INSERT INTO #EMPLOYEES VALUES (28,'N', 'FIN', '10000')

SELECT * FROM #EMPLOYEES
GO

-- SELECT DISTINCT RECORDS FROM TABLE
SELECT DISTINCT NAME, DEPT, SALARY FROM #EMPLOYEES

-- SELECT LOWEST SALARY
SELECT TOP 1 SALARY FROM #EMPLOYEES ORDER BY SALARY
SELECT MIN(SALARY) FROM #EMPLOYEES
GO

-- SELECT HIGHEST SALARY
SELECT TOP 1 SALARY FROM #EMPLOYEES ORDER BY SALARY DESC
SELECT MAX(SALARY) FROM #EMPLOYEES

-- SELECT EMPLOYEES WITH HIGHEST SALARY
SELECT * FROM #EMPLOYEES WHERE SALARY = (SELECT MIN(SALARY) FROM #EMPLOYEES)

-- SELECT EMPLOYEES AND SALARY VARIOUS RANKS
SELECT ID, NAME, SALARY, DEPT, DENSE_RANK() OVER (PARTITION BY DEPT ORDER BY SALARY DESC) AS SAL_D_RANK FROM #EMPLOYEES ORDER BY DEPT

SELECT ID, NAME, SALARY, DEPT, RANK() OVER (PARTITION BY DEPT ORDER BY SALARY DESC) AS SAL_RANK FROM #EMPLOYEES ORDER BY DEPT

SELECT ID, NAME, SALARY, DEPT, ROW_NUMBER() OVER (PARTITION BY DEPT ORDER BY SALARY DESC) AS SAL_NUMBER FROM #EMPLOYEES ORDER BY DEPT


-- DEPARTMENT WITH HIGHEST SALARIED EMPLOYEES USING DENSE RANK
WITH ORDERED_SALARY (DEPT, TOTAL_SAL, SRANK) AS
(
SELECT DEPT, SUM(SALARY), DENSE_RANK() OVER (ORDER BY SUM(SALARY) DESC) AS SRANK FROM #EMPLOYEES GROUP BY DEPT
)
SELECT * FROM ORDERED_SALARY WHERE SRANK = 1
GO

-- EMPLOYEE HAVING HIGHEST SALARY PER DEPARTMENT USING DENSE RANK
WITH ORDERED_EMPLOYEES (ID, NAME, DEPT, SALARY, SAL_RANK)
AS
(
SELECT ID, NAME, DEPT, SALARY, DENSE_RANK() OVER (PARTITION BY DEPT ORDER BY SALARY DESC) AS SAL_RANNK FROM #EMPLOYEES
)
SELECT * FROM ORDERED_EMPLOYEES WHERE SAL_RANK = 1

-- SELECT DUPLICATED RECORDS FROM TABLE USING ROW_NUMBER
WITH RECORDS (ID, NAME, DEPT, SALARY, RNUM)
AS
(
SELECT ID, NAME, DEPT, SALARY, ROW_NUMBER() OVER (PARTITION BY NAME, DEPT, SALARY ORDER BY SALARY) AS RNUM FROM #EMPLOYEES
)
SELECT * FROM RECORDS WHERE RNUM > 1


-- DELETE DUPLICATED RECORDS FROM TABLE USING ROW_NUMBER
WITH RECORDS (ID, NAME, DEPT, SALARY, RNUM)
AS
(
SELECT ID, NAME, DEPT, SALARY, ROW_NUMBER() OVER (PARTITION BY NAME, DEPT, SALARY ORDER BY SALARY) AS RNUM FROM #EMPLOYEES
)
DELETE FROM RECORDS WHERE RNUM > 1


-- ADD AND DROP COLUMNS TO EMPLOYE TABLE
ALTER TABLE #EMPLOYEES ADD MANAGER_ID INT NULL, MGR_NAME NVARCHAR(40) NULL
ALTER TABLE #EMPLOYEES DROP COLUMN MANAGER_ID, MGR_NAME

-- PRINT FIBONNACI SERIES USING SQL QUERY WITH CTE
WITH FIBTABLE (RECURSION_LEVEL, FIB_NUMBER, NEXT_NUMBER) AS 
(
	SELECT 0 AS RECURSION_LEVEL, 0 AS FIB_NUMBER, 1 AS NEXT_NUMBER
	UNION ALL
	SELECT F.RECURSION_LEVEL + 1 AS RECURSION_LEVEL, F.NEXT_NUMBER AS FIB_NUMBER, F.FIB_NUMBER + F.NEXT_NUMBER AS NEXT_NUMBER FROM FIBTABLE F
	WHERE F.RECURSION_LEVEL < 10
)
SELECT * FROM FIBTABLE
GO

-- HIRARCHY USING JOIN
-- CREATE AN EMPLOYEE TABLE
CREATE TABLE #MYEMPLOYEES
(
	EMPLOYEEID SMALLINT NOT NULL,
	FIRSTNAME NVARCHAR(30)  NOT NULL,
	LASTNAME  NVARCHAR(40) NOT NULL,
	TITLE NVARCHAR(50) NOT NULL,
	DEPTID SMALLINT NOT NULL,
	MANAGERID INT NULL,
 CONSTRAINT PK_EMPLOYEEID PRIMARY KEY CLUSTERED (EMPLOYEEID ASC)
)
GO

-- POPULATE THE TABLE WITH VALUES
INSERT INTO #MYEMPLOYEES VALUES 
(1, N'KEN', N'SÁNCHEZ', N'CHIEF EXECUTIVE OFFICER',16,NULL),
(273, N'BRIAN', N'WELCKER', N'VICE PRESIDENT OF SALES',3,1),
(274, N'STEPHEN', N'JIANG', N'NORTH AMERICAN SALES MANAGER',3,273),
(275, N'MICHAEL', N'BLYTHE', N'SALES REPRESENTATIVE',3,274),
(276, N'LINDA', N'MITCHELL', N'SALES REPRESENTATIVE',3,274),
(285, N'SYED', N'ABBAS', N'PACIFIC SALES MANAGER',3,273),
(286, N'LYNN', N'TSOFLIAS', N'SALES REPRESENTATIVE',3,285),
(16,  N'DAVID',N'BRADLEY', N'MARKETING MANAGER', 4, 273),
(23,  N'MARY', N'GIBSON', N'MARKETING SPECIALIST', 4, 16);

-- HIERARCHY USING JOIN
SELECT * FROM #MYEMPLOYEES

select e1.employeeid, e1.firstname, e1.lastname, e1.title, e1.deptid, e1.managerid, e2.firstname, e2.lastname, e2.title, e2.deptid  from #MYEMPLOYEES E1
LEFT OUTER JOIN
#MYEMPLOYEES E2 
on e1.MANAGERID = e2.EMPLOYEEID

-- FULL HIRARCHY USING CTE
WITH MANAGER (EMPLOYEEID, FIRSTNAME, LASTNAME, TITLE, DEPTID, MANAGERID, MFIRTNAME, MLASTNAME, MTITLE, MDEPTID)
AS
(
	SELECT EMPLOYEEID, FIRSTNAME, LASTNAME, TITLE, DEPTID, CAST(0 AS INT) AS MANAGERID, CAST('NA' AS NVARCHAR(30)) AS MFIRTNAME,
		CAST('NA' AS NVARCHAR(40)) AS MLASTNAME, CAST('NA' AS NVARCHAR(50)) AS MTITLE, CAST(0 AS SMALLINT) AS MDEPTID FROM #MYEMPLOYEES WHERE 
		MANAGERID IS NULL
	UNION ALL
	SELECT E.EMPLOYEEID, E.FIRSTNAME, E.LASTNAME, E.TITLE, E.DEPTID, E.MANAGERID, M.FIRSTNAME, M.LASTNAME, M.TITLE, M.DEPTID FROM #MYEMPLOYEES E,	MANAGER M
	WHERE E.MANAGERID = M.EMPLOYEEID
)
SELECT * FROM MANAGER ORDER BY EMPLOYEEID


-- PRINT SUPERVISOR HIRARCY OF AN EMPLOYEE
WITH MANAGER (LEVEL, EMPLOYEEID, FIRSTNAME, LASTNAME, MANAGERID) AS
(
	SELECT 1 AS LEVEL, EMPLOYEEID, FIRSTNAME, LASTNAME, MANAGERID FROM #MYEMPLOYEES WHERE EMPLOYEEID = 16
		UNION ALL
	SELECT M.LEVEL + 1 AS LEVEL, E.EMPLOYEEID, E.FIRSTNAME, E.LASTNAME, E.MANAGERID FROM #MYEMPLOYEES E, MANAGER M WHERE 
	E.EMPLOYEEID = M.MANAGERID
)
SELECT * FROM MANAGER
GO

-- PRINT EMPLOYEE RECORDS 10 TIMES
With Cte AS
(
select   EMPLOYEEID, FIRSTNAME, 10 as MaxCount from #MYEMPLOYEES
UNION ALL
select   EMPLOYEEID, FIRSTNAME, MaxCount-1 from cte e where MaxCount-1 > 0
 )
 select * from cte


-- SELECT MANAGER NAME AND COUNT OF AL EMPLOYEES WORKING UNDER HIM OR HER
with manager as
(
select e.employeeid mid, e.employeeid id from #myemployees e where e.employeeid in (select managerid from #myemployees)
union all
select m.mid, e.employeeid id from #myemployees e join manager m on e.managerid = m.id
)
select e.employeeid, e.firstname, count(m.mid)  from #myemployees e left outer join manager m on e.employeeid = m.mid 
and m.id <> m.mid 
group by e.employeeid, e.firstname
go
 
 
select getdate() as OriginalDate, convert(varchar,getdate(),100) as ConvertedDate, 100 as FormatValue, 'mon dd yyyy hh:miAM (or PM)' as OutputFormat
union all
select getdate(),convert(varchar,getdate(),101),101,'mm/dd/yy'
union all
select getdate(),convert(varchar,getdate(),102),102,'yy.mm.dd'
union all
select getdate(),convert(varchar,getdate(),103),103,'dd/mm/yy'
union all
select getdate(),convert(varchar,getdate(),104),104,'dd.mm.yy'
union all
select getdate(),convert(varchar,getdate(),105),105,'dd-mm-yy'
union all
select getdate(),convert(varchar,getdate(),106),106,'dd mon yy'
union all
select getdate(),convert(varchar,getdate(),107),107,'Mon dd, yy'
union all
select getdate(),convert(varchar,getdate(),108),108,'hh:mm:ss'
union all
select getdate(),convert(varchar,getdate(),109),109,'mon dd yyyy hh:mi:ss:mmmAM (or PM)'
union all
select getdate(),convert(varchar,getdate(),110),110,'mm-dd-yy'
union all
select getdate(),convert(varchar,getdate(),111),111,'yy/mm/dd'
union all
select getdate(),convert(varchar,getdate(),12),12,'yymmdd'
union all
select getdate(),convert(varchar,getdate(),112),112,'yyyymmdd'
union all
select getdate(),convert(varchar,getdate(),113),113,'dd mon yyyy hh:mm:ss:mmm(24h)'
union all
select getdate(),convert(varchar,getdate(),114),114,'hh:mi:ss:mmm(24h)'
union all
select getdate(),convert(varchar,getdate(),120),120,'yyyy-mm-dd hh:mi:ss(24h)'
union all
select getdate(),convert(varchar,getdate(),121),121,'yyyy-mm-dd hh:mi:ss.mmm(24h)'
union all
select getdate(),convert(varchar,getdate(),126),126,'yyyy-mm-dd Thh:mm:ss:mmm(no spaces)'
